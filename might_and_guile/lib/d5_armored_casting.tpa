//ARMORED CASTING MACRO__________________________________________________________
//
//	v2.1
//
DEFINE_ACTION_MACRO D5_ARMORED_CASTING BEGIN
  ACTION_IF NOT FILE_EXISTS_IN_GAME ~d5__armcast.d5~ BEGIN
	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
	  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
		READ_SHORT 0x1c type
		READ_LONG 0x22 appearance
		PATCH_IF (type = 2) BEGIN // armor
		  PATCH_IF (appearance = 16690) BEGIN // leather appearance
			LPF ALTER_EFFECT INT_VAR silent = 1 match_opcode = 145 opcode = 177 parameter1 = 0 parameter2 = 2 STR_VAR resource = ~d5arcal~ END
		  END
		  PATCH_IF (appearance = 16691) BEGIN // chain appearance
			LPF ALTER_EFFECT INT_VAR silent = 1 match_opcode = 145 opcode = 177 parameter1 = 0 parameter2 = 2 STR_VAR resource = ~d5arcac~ END
		  END
		  PATCH_IF (appearance = 16692) BEGIN // plate appearance
			LPF ALTER_EFFECT INT_VAR silent = 1 match_opcode = 145 opcode = 177 parameter1 = 0 parameter2 = 2 STR_VAR resource = ~d5arcap~ END
		  END
		END
	  END
	BUT_ONLY
	CREATE EFF ~D5ARCAL~											// 	disable casting, leather armors
		WRITE_LONG 0x10 145
		WRITE_LONG 0x14 1
		WRITE_LONG 0x20 0
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_LONG 0x90 1
		WRITE_ASCII 0x94 ~D5ARCAL~ #8
	CREATE EFF ~D5ARCAC~											// 	disable casting, chain armors
		WRITE_LONG 0x10 145
		WRITE_LONG 0x14 1
		WRITE_LONG 0x20 0
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_LONG 0x90 1
		WRITE_ASCII 0x94 ~D5ARCAC~ #8
	CREATE EFF ~D5ARCAP~											// 	disable casting, plate armors
		WRITE_LONG 0x10 145
		WRITE_LONG 0x14 1
		WRITE_LONG 0x20 0
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_LONG 0x90 1
		WRITE_ASCII 0x94 ~D5ARCAP~ #8
	CREATE EFF ~D5ARCAL~											// 	immunity to d5arcaL
		WRITE_LONG 0x10 206
		WRITE_LONG 0x14 1
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_ASCII 0x30 ~D5ARCAL~ #8
	CREATE EFF ~D5ARCAC~											// 	immunity to d5arcaC
		WRITE_LONG 0x10 206
		WRITE_LONG 0x14 1
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_ASCII 0x30 ~D5ARCAC~ #8
	CREATE EFF ~D5ARCAP~											// 	immunity to d5arcaP
		WRITE_LONG 0x10 206
		WRITE_LONG 0x14 1
		WRITE_LONG 0x24 2
		WRITE_SHORT 0x2c 100
		WRITE_ASCII 0x30 ~D5ARCAP~ #8
	CREATE SPL ~d5arca1~											// 	immunity to d5arcaL
		LPF QD_ADD_EMPTY_SPELL_HEADER INT_VAR type = 1 location = 4 target = 1 required_level = 1 END
		WRITE_SHORT 0x1c 4
		WRITE_LONG 0x34 1
		SAY NAME1 ~ ~
		SAY UNIDENTIFIED_DESC ~ ~
		LPF DELETE_EFFECT INT_VAR match_probability1 = 100 END
		LPF ADD_SPELL_EFFECT INT_VAR opcode = 206 target = 1 parameter1 = (0 - 1) timing = 9 STR_VAR resource = ~D5ARCAL~ END
	CREATE SPL ~d5arca2~											// 	immunity to d5arcaC
		LPF QD_ADD_EMPTY_SPELL_HEADER INT_VAR type = 1 location = 4 target = 1 required_level = 1 END
		WRITE_SHORT 0x1c 4
		WRITE_LONG 0x34 1
		SAY NAME1 ~ ~
		SAY UNIDENTIFIED_DESC ~ ~
		LPF DELETE_EFFECT INT_VAR match_probability1 = 100 END
		LPF ADD_SPELL_EFFECT INT_VAR opcode = 206 target = 1 parameter1 = (0 - 1) timing = 9 STR_VAR resource = ~D5ARCAC~ END
	CREATE SPL ~d5arca3~											// 	immunity to d5arcaP
		LPF QD_ADD_EMPTY_SPELL_HEADER INT_VAR type = 1 location = 4 target = 1 required_level = 1 END
		WRITE_SHORT 0x1c 4
		WRITE_LONG 0x34 1
		SAY NAME1 ~ ~
		SAY UNIDENTIFIED_DESC ~ ~
		LPF DELETE_EFFECT INT_VAR match_probability1 = 100 END
		LPF ADD_SPELL_EFFECT INT_VAR opcode = 206 target = 1 parameter1 = (0 - 1) timing = 9 STR_VAR resource = ~D5ARCAP~ END
	COPY_EXISTING ~sw1h04.itm~ ~override/d5__armcast.d5~				// 	marker file
  END
END


//__________________________________________________________________________________
//__________________________________________________________________________________


DEFINE_PATCH_FUNCTION QD_ADD_EMPTY_SPELL_HEADER
INT_VAR
  type            = 1
  location        = 4
  target          = 1
  target_count    = 0
  range           = 0
  required_level  = 1
  speed           = 0
  projectile      = 1
  copy_header     = 0
  insert_point    = ~-1~
STR_VAR
  icon            = ~~
RET
  insert_point
BEGIN
  SET hs = 0x28
  READ_LONG 0x64 ho
  READ_SHORT 0x68 hc
  READ_LONG 0x6a eo
  SET insert_point = (insert_point > hc || insert_point < 0) ? hc : insert_point
  SET copy_header = (copy_header < 0) ? 0 : copy_header
  PATCH_IF (copy_header > hc) BEGIN
    PATCH_WARN ~WARNING: Unable to copy %copy_header%th header, %SOURCE_FILE% contains only %hc% headers!~
  END ELSE BEGIN
    INSERT_BYTES (ho + insert_point * hs) hs
    SET hc += 1
    SET eo += hs
    PATCH_IF (copy_header) BEGIN
      READ_SHORT (ho + (copy_header - 1) * hs + 0x1e) ec
      READ_SHORT (ho + (copy_header - 1) * hs + 0x20) ei
      READ_ASCII (eo + ei * 0x30) effs (ec * 0x30)
      READ_ASCII (ho + (copy_header - 1) * hs) copy (hs)
      WRITE_ASCIIE (ho + insert_point * hs) ~%copy%~ (hs)
    END
    WRITE_SHORT 0x68 hc
    WRITE_LONG 0x6a eo
    READ_SHORT 0x70 ei // technically, it is a counter
    FOR (i = ho; i < ho + hc * hs; i += hs) BEGIN
      READ_SHORT (i + 0x1e) ec
      WRITE_SHORT (i + 0x20) ei
      SET ei += ec
    END
    PATCH_IF (copy_header) BEGIN
      READ_SHORT (ho + insert_point * hs + 0x1e) ec
      READ_SHORT (ho + insert_point * hs + 0x20) ei
      INSERT_BYTES (eo + ei * 0x30) (ec * 0x30)
      WRITE_ASCIIE (eo + ei * 0x30) ~%effs%~ (ec * 0x30)
    END ELSE BEGIN
      SET off = ho + insert_point * hs
      WRITE_BYTE off type
      WRITE_BYTE (off + 0x2) location
      WRITE_ASCIIE (off + 0x4) ~%icon%~ (8)
      WRITE_BYTE (off + 0xc) target
      WRITE_BYTE (off + 0xd) target_count
      WRITE_SHORT (off + 0xe) range
      WRITE_SHORT (off + 0x10) required_level
      WRITE_LONG (off + 0x12) speed
      WRITE_SHORT (off + 0x26) projectile
    END
  END
END


//__________________________________________________________________________________
//__________________________________________________________________________________
